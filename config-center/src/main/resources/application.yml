eureka:
  client:
    registerWithEureka: true # 表示是否注册自身到eureka服务器，
    fetchRegistry: true # 是否从eureka上获取注册信息
    #客户端间隔30秒重新获取eureka上的信息
    registry-fetch-interval-seconds: 30
    serviceUrl:
      defaultZone: http://admin:123@localhost:8088/eureka/
  #心跳检测与续约时间
  #测试时将值设置小些，保证服务关闭后注册中心能及时踢出服务
  instance:
    #Eureka客户端向服务发送心跳的时间间隔，单位为秒(客户端会告诉服务端按照这个规则)
    lease-renewal-interval-in-seconds: 1
    #Eureka服务端在收到最后一次心跳之后等待的时间上线，单位为秒，超过踢出(客户端告诉服务端按照这个规则)
    lease-expiration-duration-in-seconds: 2
    instance-id: ${spring.cloud.client.ipAddress}:${server.port}
    prefer-ip-address: true #使用ip注册
    #instanceId: ${spring.application.name}:${spring.application.instance_id:${server.port}}


server:
  port: 8086

#refresh配置是否需要权限
#management:
#    endpoint:
#      bus-refresh:
#        enabled: false
management:
  endpoints:
    web:
      exposure:
        include: "*" #暴露所有接口


spring:
  application:
    name: config-server
  cloud:
    config:
      server:
        git:
          uri: https://gitee.com/disvenk/config-center.git
          #searchPaths: disvenk #如果文件存储在git的根目录下则无需此参数
          username: 13477058114@163.com
          password: disvenk472810
          basedir: /temp #application-dev文件的临时存储目录,配成linux，默认为项目同级目录下
          #default-label: master
      #label: master

  rabbitmq:
    host: 47.104.19.44
    port: 5672
    username: disvenk
    password: disvenk

#http://localhost:8086/bus/refresh 调用服务端通知所有节点刷新配置
#http://localhost:8088/refresh 调用客户端，只刷新该客户端的配置

#http://localhost:8086/actuator/bus-refresh

#访问文件的表达式
#/{application}/{profile}[/{label}]
#/{application}-{profile}.yml
#/{label}/{application}-{profile}.yml
#/{application}-{profile}.properties
#/{label}/{application}-{profile}.properties
#在浏览器中的访问路径查看http://localhost:8086/foo/dev或者http://localhost:8086/foo/dev
#访问test就是test，dev就是dev
